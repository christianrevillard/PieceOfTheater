<?php
abstract class Subdivision
{
    protected $DefaultLabel;
    protected $ParsedLabel;
    protected $ParsedKey;
    protected $ParsedTitle;
    
    public function GetLabel()
    {
        return strlen($this->ParsedLabel) > 0 ? $this->ParsedLabel : $this->DefaultLabel;
    }
    
    public function GetKey()
    {        
        return strlen($this->ParsedKey) > 0 ? $this->ParsedKey : substr($this->DisplayString(),0,1);
    }

    public function DisplayString()
    {
        return strlen($this->ParsedKey) > 0 ? 
        ($this->GetLabel() . " " .  $this->ParsedKey . " " . $this->ParsedTitle) : 
        ((strlen($this->ParsedLabel) > 0) ? 
        ($this->GetLabel() . " " . $this->ParsedTitle):"");
    }
    
    protected function RegexParse($regex, $line)
    {        
        preg_match($regex, $line, $matches);
        
        if (count($matches) > 0) {
            
            $this->ParsedLabel = trim($matches[1]);
            $this->ParsedKey = trim($matches[2]);
            $this->ParsedTitle = trim($matches[3]);
                        
            return true;
        }

        return false;
    }
}

class Acte extends Subdivision {
        
    public $Scenes = [];
    
    public function __construct(){
        $this->DefaultLabel =  "Acte";
    }
    
    public function Parse($line)
    {                
        $regEx ="/^((?:PROLOGUE)|(?:.{1,2}PILOGUE)|(?:ACTE)|(?:))(?: *)((?:[IXV]{1,4}\.?)|(?:[0-9]*\.?))(?: *)(.*)$/i";
        $standAloneKeyFormat ="/^[IXV]{0,4}\.$/i";
        
        return $this->RegexParse($regEx, $line) && (strlen($this->ParsedLabel)>0 || preg_match($standAloneKeyFormat, $this->ParsedKey));
    }
}

class Scene extends Subdivision {
    
    public $Characters = [];
    private $ActeKey = "";
       
    public function __construct($acte){
        $this->DefaultLabel =  utf8_encode ("Scène");       
        $this->ActeKey =  $acte->GetKey();
    }
    
    public function Parse($line)
    {
        $regEx ="/^((?:SC.{1,2}NE)|(?:))(?: *)(-?[0-9A-Z]+\.)(?: *)(.*)$/i";
        return $this->RegexParse($regEx, $line);
    }
    
    public function FullKey(){
        return $this->ActeKey . "-" . $this->GetKey();
    }
    
    public function DisplayString()
    {
        $display = parent::DisplayString();
        if (strlen($display) > 0)
            return $display;
        
        return "Pr&eacute;lude";
    }
}

class PlayData 
{
    public $Actes = [];
    public $Repliques = 0;
    public $Words = 0;
    public $Didascalies = "";
    public $PlayCharacters = [];  
    public static function ParseText($rawText)
    {
        $playData = new PlayData();
        $ligneIndex = 0;
        $currentActe = new Acte();
        $currentScene = new Scene($currentActe);
        
        $matchReplique = "/^([^:+(]*) *(\(.+\))? *: *([^ ].*)$/i";
        $alphaNumeric = "\p{L}";
        $matchWords = "/([" . $alphaNumeric . "]+)(?:(?:[^" . $alphaNumeric . "]+)|$)/u";
        
        $lignes = explode("\r\n", $rawText);
        
        foreach ($lignes as $ligne) {
            $ligneIndex ++;
            $ligne = trim($ligne);
            
            if ($ligne == "")
                continue;
                
                preg_match($matchReplique, $ligne, $matches);
                
                if (count($matches) > 2) {
                    
                    if (count($playData->Actes)==0)
                    {
                        array_push($playData->Actes, $currentActe);                        
                    }
                    
                    if (count($currentActe->Scenes)==0)
                    {
                        array_push($currentActe->Scenes, $currentScene);
                    }
                    
                    $personnage = trim($matches[1]);
                    $replique = trim($matches[2]) . " " . trim($matches[3]);
                    $key = strtolower(preg_replace("/[^a-zA-Z0-9]/", "X", $personnage));
                    
                    if (! array_key_exists($key, $playData->PlayCharacters)) {
                        $playData->PlayCharacters[$key] = new PlayCharacter($personnage);
                        $playData->PlayCharacters[$key]->PremiereReplique = $ligneIndex;
                    }
                    
                    if (! in_array($currentActe->DisplayString(), $playData->PlayCharacters[$key]->ActeKeys)) {
                        array_push($playData->PlayCharacters[$key]->ActeKeys, $currentActe->DisplayString());
                        $playData->PlayCharacters[$key]->Details .= "<h2>" . $currentActe->DisplayString() . "</h2>";
                    }
                    if (! in_array($currentScene->FullKey(), $playData->PlayCharacters[$key]->SceneKeys)) {
                        array_push($playData->PlayCharacters[$key]->SceneKeys, $currentScene->FullKey());
                        array_push($currentScene->Characters, $personnage);
                        $playData->PlayCharacters[$key]->Details .= "<h3>" . $currentScene->DisplayString() . "</h3>";
                    }
                    
                    $playData->PlayCharacters[$key]->DerniereReplique = $ligneIndex;
                    
                    preg_match_all($matchWords, preg_replace("/\(.*?\)/", "", $replique), $mots);
                    
                    $playData->PlayCharacters[$key]->Repliques+=1;
                    $playData->PlayCharacters[$key]->Details.= $playData->PlayCharacters[$key]->Repliques . " - <small><i>(Ligne " . $ligneIndex . ")</i></small>: " . preg_replace("/\(.*?\)/", "<small><i>$0</i></small>", $replique) . " <small><i>(" . count($mots[1]) . " mot" . (count($mots[1]) > 1 ? "s" : "") . ")</i></small><br/>";
                    $playData->PlayCharacters[$key]->Words += count($mots[1]);
                    $playData->Repliques += 1;
                    $playData->Words += count($mots[1]);
                } else {
                    
                    $isActe = false;
                    $alreadyActe = false;
                    
                    $acte = new Acte();
                    if ($acte->Parse($ligne))
                    {
                        foreach($playData->Actes as $existingActe)
                        {
                            //mainly to handle Acte I, Scène i...
                            if ($existingActe->GetKey() == $acte->GetKey())
                            {
                                $alreadyActe = true;
                                break;
                            }
                        }
                        
                        if (! $alreadyActe) {
                            $isActe = true;
                            $currentActe = $acte;
                            array_push($playData->Actes, $acte);
                            $currentScene = new Scene($currentActe);                            
                        }
                    }
                    
                    if (! $isActe) {
                        
                        $sc = new Scene($currentActe);
                        if ($sc->Parse($ligne))
                        {
                            $currentScene = $sc;
                            array_push($currentActe->Scenes, $sc);
                        } else {
                            // nothing so far...
                            $playData->Didascalies .= $ligne . "<br/>";
                        }
                    }
                }
        }
        
        return $playData;
    }   
}

class PlayCharacter
{
    function __construct($name)
    {
        $this->Name = $name;
    }
    
    public $Name = "";
    public $Repliques = 0;
    public $Words = 0;
    public $PremiereReplique = 0;
    public $DerniereReplique = 0;
    public $Details = "";
    public $ActeKeys = [];
    public $SceneKeys = [];
}
?>